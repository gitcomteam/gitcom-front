/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { SupportHubApiContext } from "./supportHubApiContext";

class SupportHubApi extends SupportHubApiContext {
  /**
   * Initializes a new instance of the SupportHubApi class.
   * @param entityType Possible values include: 'ProjectCategory', 'Project', 'Board', 'Card',
   * 'BacklogItem', 'UserBalance', 'User', 'ProjectProductPurchase', 'BoardColumn'
   * @param [options] The parameter options
   */
  constructor(entityType: string, options?: Models.SupportHubApiOptions) {
    super(entityType, options);
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.GetLoginResponse>
   */
  getLogin(options?: Models.SupportHubApiGetLoginOptionalParams): Promise<Models.GetLoginResponse>;
  /**
   * @param callback The callback
   */
  getLogin(callback: msRest.ServiceCallback<Models.GetLoginOKResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getLogin(options: Models.SupportHubApiGetLoginOptionalParams, callback: msRest.ServiceCallback<Models.GetLoginOKResponse>): void;
  getLogin(options?: Models.SupportHubApiGetLoginOptionalParams | msRest.ServiceCallback<Models.GetLoginOKResponse>, callback?: msRest.ServiceCallback<Models.GetLoginOKResponse>): Promise<Models.GetLoginResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getLoginOperationSpec,
      callback) as Promise<Models.GetLoginResponse>;
  }

  /**
   * @param login
   * @param email
   * @param password
   * @param [options] The optional parameters
   * @returns Promise<Models.PostRegisterResponse>
   */
  postRegister(login: string, email: string, password: string, options?: Models.SupportHubApiPostRegisterOptionalParams): Promise<Models.PostRegisterResponse>;
  /**
   * @param login
   * @param email
   * @param password
   * @param callback The callback
   */
  postRegister(login: string, email: string, password: string, callback: msRest.ServiceCallback<Models.PostRegisterOKResponse>): void;
  /**
   * @param login
   * @param email
   * @param password
   * @param options The optional parameters
   * @param callback The callback
   */
  postRegister(login: string, email: string, password: string, options: Models.SupportHubApiPostRegisterOptionalParams, callback: msRest.ServiceCallback<Models.PostRegisterOKResponse>): void;
  postRegister(login: string, email: string, password: string, options?: Models.SupportHubApiPostRegisterOptionalParams | msRest.ServiceCallback<Models.PostRegisterOKResponse>, callback?: msRest.ServiceCallback<Models.PostRegisterOKResponse>): Promise<Models.PostRegisterResponse> {
    return this.sendOperationRequest(
      {
        login,
        email,
        password,
        options
      },
      postRegisterOperationSpec,
      callback) as Promise<Models.PostRegisterResponse>;
  }

  /**
   * @param confirmationKey
   * @param [options] The optional parameters
   * @returns Promise<Models.PostConfirmEmailResponse>
   */
  postConfirmEmail(confirmationKey: string, options?: msRest.RequestOptionsBase): Promise<Models.PostConfirmEmailResponse>;
  /**
   * @param confirmationKey
   * @param callback The callback
   */
  postConfirmEmail(confirmationKey: string, callback: msRest.ServiceCallback<Models.PostConfirmEmailOKResponse>): void;
  /**
   * @param confirmationKey
   * @param options The optional parameters
   * @param callback The callback
   */
  postConfirmEmail(confirmationKey: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PostConfirmEmailOKResponse>): void;
  postConfirmEmail(confirmationKey: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PostConfirmEmailOKResponse>, callback?: msRest.ServiceCallback<Models.PostConfirmEmailOKResponse>): Promise<Models.PostConfirmEmailResponse> {
    return this.sendOperationRequest(
      {
        confirmationKey,
        options
      },
      postConfirmEmailOperationSpec,
      callback) as Promise<Models.PostConfirmEmailResponse>;
  }

  /**
   * Returns github login link
   * @param [options] The optional parameters
   * @returns Promise<Models.GetGitHubLoginLinkResponse>
   */
  getGitHubLoginLink(options?: msRest.RequestOptionsBase): Promise<Models.GetGitHubLoginLinkResponse>;
  /**
   * @param callback The callback
   */
  getGitHubLoginLink(callback: msRest.ServiceCallback<Models.GetGitHubLoginLinkOKResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getGitHubLoginLink(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetGitHubLoginLinkOKResponse>): void;
  getGitHubLoginLink(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetGitHubLoginLinkOKResponse>, callback?: msRest.ServiceCallback<Models.GetGitHubLoginLinkOKResponse>): Promise<Models.GetGitHubLoginLinkResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getGitHubLoginLinkOperationSpec,
      callback) as Promise<Models.GetGitHubLoginLinkResponse>;
  }

  /**
   * Getting JWT token for use in app (after GitHub log in)
   * @param [options] The optional parameters
   * @returns Promise<Models.GetGitHubAuthTokenResponse>
   */
  getGitHubAuthToken(options?: Models.SupportHubApiGetGitHubAuthTokenOptionalParams): Promise<Models.GetGitHubAuthTokenResponse>;
  /**
   * @param callback The callback
   */
  getGitHubAuthToken(callback: msRest.ServiceCallback<Models.GetGitHubAuthTokenOKResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getGitHubAuthToken(options: Models.SupportHubApiGetGitHubAuthTokenOptionalParams, callback: msRest.ServiceCallback<Models.GetGitHubAuthTokenOKResponse>): void;
  getGitHubAuthToken(options?: Models.SupportHubApiGetGitHubAuthTokenOptionalParams | msRest.ServiceCallback<Models.GetGitHubAuthTokenOKResponse>, callback?: msRest.ServiceCallback<Models.GetGitHubAuthTokenOKResponse>): Promise<Models.GetGitHubAuthTokenResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getGitHubAuthTokenOperationSpec,
      callback) as Promise<Models.GetGitHubAuthTokenResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.GetGitLabLoginLinkResponse>
   */
  getGitLabLoginLink(options?: msRest.RequestOptionsBase): Promise<Models.GetGitLabLoginLinkResponse>;
  /**
   * @param callback The callback
   */
  getGitLabLoginLink(callback: msRest.ServiceCallback<Models.GetGitLabLoginLinkOKResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getGitLabLoginLink(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetGitLabLoginLinkOKResponse>): void;
  getGitLabLoginLink(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetGitLabLoginLinkOKResponse>, callback?: msRest.ServiceCallback<Models.GetGitLabLoginLinkOKResponse>): Promise<Models.GetGitLabLoginLinkResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getGitLabLoginLinkOperationSpec,
      callback) as Promise<Models.GetGitLabLoginLinkResponse>;
  }

  /**
   * Getting JWT token for use in app (after GitLab log in)
   * @param [options] The optional parameters
   * @returns Promise<Models.GetGitLabAuthTokenResponse>
   */
  getGitLabAuthToken(options?: Models.SupportHubApiGetGitLabAuthTokenOptionalParams): Promise<Models.GetGitLabAuthTokenResponse>;
  /**
   * @param callback The callback
   */
  getGitLabAuthToken(callback: msRest.ServiceCallback<Models.GetGitLabAuthTokenOKResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getGitLabAuthToken(options: Models.SupportHubApiGetGitLabAuthTokenOptionalParams, callback: msRest.ServiceCallback<Models.GetGitLabAuthTokenOKResponse>): void;
  getGitLabAuthToken(options?: Models.SupportHubApiGetGitLabAuthTokenOptionalParams | msRest.ServiceCallback<Models.GetGitLabAuthTokenOKResponse>, callback?: msRest.ServiceCallback<Models.GetGitLabAuthTokenOKResponse>): Promise<Models.GetGitLabAuthTokenResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getGitLabAuthTokenOperationSpec,
      callback) as Promise<Models.GetGitLabAuthTokenResponse>;
  }

  /**
   * @param apiToken JWT token
   * @param [options] The optional parameters
   * @returns Promise<Models.GetMeExternalRepositoriesResponse>
   */
  getMeExternalRepositories(apiToken: string, options?: msRest.RequestOptionsBase): Promise<Models.GetMeExternalRepositoriesResponse>;
  /**
   * @param apiToken JWT token
   * @param callback The callback
   */
  getMeExternalRepositories(apiToken: string, callback: msRest.ServiceCallback<Models.GetMeExternalRepositoriesOKResponse>): void;
  /**
   * @param apiToken JWT token
   * @param options The optional parameters
   * @param callback The callback
   */
  getMeExternalRepositories(apiToken: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetMeExternalRepositoriesOKResponse>): void;
  getMeExternalRepositories(apiToken: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetMeExternalRepositoriesOKResponse>, callback?: msRest.ServiceCallback<Models.GetMeExternalRepositoriesOKResponse>): Promise<Models.GetMeExternalRepositoriesResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        options
      },
      getMeExternalRepositoriesOperationSpec,
      callback) as Promise<Models.GetMeExternalRepositoriesResponse>;
  }

  /**
   * @param apiToken JWT token
   * @param [options] The optional parameters
   * @returns Promise<Models.GetMyIntegrationsStatusResponse>
   */
  getMyIntegrationsStatus(apiToken: string, options?: msRest.RequestOptionsBase): Promise<Models.GetMyIntegrationsStatusResponse>;
  /**
   * @param apiToken JWT token
   * @param callback The callback
   */
  getMyIntegrationsStatus(apiToken: string, callback: msRest.ServiceCallback<Models.GetMyIntegrationsStatusOKResponse>): void;
  /**
   * @param apiToken JWT token
   * @param options The optional parameters
   * @param callback The callback
   */
  getMyIntegrationsStatus(apiToken: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetMyIntegrationsStatusOKResponse>): void;
  getMyIntegrationsStatus(apiToken: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetMyIntegrationsStatusOKResponse>, callback?: msRest.ServiceCallback<Models.GetMyIntegrationsStatusOKResponse>): Promise<Models.GetMyIntegrationsStatusResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        options
      },
      getMyIntegrationsStatusOperationSpec,
      callback) as Promise<Models.GetMyIntegrationsStatusResponse>;
  }

  /**
   * Import project from external service
   * @param apiToken JWT token
   * @param originId Origin repository id
   * @param serviceType Possible values include: 'GitHub', 'GitLab'
   * @param [options] The optional parameters
   * @returns Promise<Models.PostImportRepositoryResponse>
   */
  postImportRepository(apiToken: string, originId: string, serviceType: Models.ServiceType1, options?: msRest.RequestOptionsBase): Promise<Models.PostImportRepositoryResponse>;
  /**
   * @param apiToken JWT token
   * @param originId Origin repository id
   * @param serviceType Possible values include: 'GitHub', 'GitLab'
   * @param callback The callback
   */
  postImportRepository(apiToken: string, originId: string, serviceType: Models.ServiceType1, callback: msRest.ServiceCallback<Models.PostImportRepositoryOKResponse>): void;
  /**
   * @param apiToken JWT token
   * @param originId Origin repository id
   * @param serviceType Possible values include: 'GitHub', 'GitLab'
   * @param options The optional parameters
   * @param callback The callback
   */
  postImportRepository(apiToken: string, originId: string, serviceType: Models.ServiceType1, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PostImportRepositoryOKResponse>): void;
  postImportRepository(apiToken: string, originId: string, serviceType: Models.ServiceType1, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PostImportRepositoryOKResponse>, callback?: msRest.ServiceCallback<Models.PostImportRepositoryOKResponse>): Promise<Models.PostImportRepositoryResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        originId,
        serviceType,
        options
      },
      postImportRepositoryOperationSpec,
      callback) as Promise<Models.PostImportRepositoryResponse>;
  }

  /**
   * @param repoGuid Repository Guid
   * @param [options] The optional parameters
   * @returns Promise<Models.GetRepoResponse>
   */
  getRepo(repoGuid: string, options?: msRest.RequestOptionsBase): Promise<Models.GetRepoResponse>;
  /**
   * @param repoGuid Repository Guid
   * @param callback The callback
   */
  getRepo(repoGuid: string, callback: msRest.ServiceCallback<Models.GetRepoOKResponse>): void;
  /**
   * @param repoGuid Repository Guid
   * @param options The optional parameters
   * @param callback The callback
   */
  getRepo(repoGuid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetRepoOKResponse>): void;
  getRepo(repoGuid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetRepoOKResponse>, callback?: msRest.ServiceCallback<Models.GetRepoOKResponse>): Promise<Models.GetRepoResponse> {
    return this.sendOperationRequest(
      {
        repoGuid,
        options
      },
      getRepoOperationSpec,
      callback) as Promise<Models.GetRepoResponse>;
  }

  /**
   * @param projectGuid Project Guid
   * @param [options] The optional parameters
   * @returns Promise<Models.GetProjectResponse>
   */
  getProject(projectGuid: string, options?: msRest.RequestOptionsBase): Promise<Models.GetProjectResponse>;
  /**
   * @param projectGuid Project Guid
   * @param callback The callback
   */
  getProject(projectGuid: string, callback: msRest.ServiceCallback<Models.GetProjectOKResponse>): void;
  /**
   * @param projectGuid Project Guid
   * @param options The optional parameters
   * @param callback The callback
   */
  getProject(projectGuid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetProjectOKResponse>): void;
  getProject(projectGuid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetProjectOKResponse>, callback?: msRest.ServiceCallback<Models.GetProjectOKResponse>): Promise<Models.GetProjectResponse> {
    return this.sendOperationRequest(
      {
        projectGuid,
        options
      },
      getProjectOperationSpec,
      callback) as Promise<Models.GetProjectResponse>;
  }

  /**
   * @param apiToken JWT token
   * @param projectGuid Project Guid
   * @param [options] The optional parameters
   * @returns Promise<Models.EditProjectResponse>
   */
  editProject(apiToken: string, projectGuid: string, options?: Models.SupportHubApiEditProjectOptionalParams): Promise<Models.EditProjectResponse>;
  /**
   * @param apiToken JWT token
   * @param projectGuid Project Guid
   * @param callback The callback
   */
  editProject(apiToken: string, projectGuid: string, callback: msRest.ServiceCallback<Models.EditProjectOKResponse>): void;
  /**
   * @param apiToken JWT token
   * @param projectGuid Project Guid
   * @param options The optional parameters
   * @param callback The callback
   */
  editProject(apiToken: string, projectGuid: string, options: Models.SupportHubApiEditProjectOptionalParams, callback: msRest.ServiceCallback<Models.EditProjectOKResponse>): void;
  editProject(apiToken: string, projectGuid: string, options?: Models.SupportHubApiEditProjectOptionalParams | msRest.ServiceCallback<Models.EditProjectOKResponse>, callback?: msRest.ServiceCallback<Models.EditProjectOKResponse>): Promise<Models.EditProjectResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        projectGuid,
        options
      },
      editProjectOperationSpec,
      callback) as Promise<Models.EditProjectResponse>;
  }

  /**
   * @param projectGuid
   * @param [options] The optional parameters
   * @returns Promise<Models.GetProjectBoardsResponse>
   */
  getProjectBoards(projectGuid: string, options?: msRest.RequestOptionsBase): Promise<Models.GetProjectBoardsResponse>;
  /**
   * @param projectGuid
   * @param callback The callback
   */
  getProjectBoards(projectGuid: string, callback: msRest.ServiceCallback<Models.GetProjectBoardsOKResponse>): void;
  /**
   * @param projectGuid
   * @param options The optional parameters
   * @param callback The callback
   */
  getProjectBoards(projectGuid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetProjectBoardsOKResponse>): void;
  getProjectBoards(projectGuid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetProjectBoardsOKResponse>, callback?: msRest.ServiceCallback<Models.GetProjectBoardsOKResponse>): Promise<Models.GetProjectBoardsResponse> {
    return this.sendOperationRequest(
      {
        projectGuid,
        options
      },
      getProjectBoardsOperationSpec,
      callback) as Promise<Models.GetProjectBoardsResponse>;
  }

  /**
   * @param boardGuid Board Guid
   * @param [options] The optional parameters
   * @returns Promise<Models.GetBoardResponse>
   */
  getBoard(boardGuid: string, options?: msRest.RequestOptionsBase): Promise<Models.GetBoardResponse>;
  /**
   * @param boardGuid Board Guid
   * @param callback The callback
   */
  getBoard(boardGuid: string, callback: msRest.ServiceCallback<Models.GetBoardOKResponse>): void;
  /**
   * @param boardGuid Board Guid
   * @param options The optional parameters
   * @param callback The callback
   */
  getBoard(boardGuid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetBoardOKResponse>): void;
  getBoard(boardGuid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetBoardOKResponse>, callback?: msRest.ServiceCallback<Models.GetBoardOKResponse>): Promise<Models.GetBoardResponse> {
    return this.sendOperationRequest(
      {
        boardGuid,
        options
      },
      getBoardOperationSpec,
      callback) as Promise<Models.GetBoardResponse>;
  }

  /**
   * @param boardGuid
   * @param [options] The optional parameters
   * @returns Promise<Models.GetBoardColumnsResponse>
   */
  getBoardColumns(boardGuid: string, options?: msRest.RequestOptionsBase): Promise<Models.GetBoardColumnsResponse>;
  /**
   * @param boardGuid
   * @param callback The callback
   */
  getBoardColumns(boardGuid: string, callback: msRest.ServiceCallback<Models.GetBoardColumnsOKResponse>): void;
  /**
   * @param boardGuid
   * @param options The optional parameters
   * @param callback The callback
   */
  getBoardColumns(boardGuid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetBoardColumnsOKResponse>): void;
  getBoardColumns(boardGuid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetBoardColumnsOKResponse>, callback?: msRest.ServiceCallback<Models.GetBoardColumnsOKResponse>): Promise<Models.GetBoardColumnsResponse> {
    return this.sendOperationRequest(
      {
        boardGuid,
        options
      },
      getBoardColumnsOperationSpec,
      callback) as Promise<Models.GetBoardColumnsResponse>;
  }

  /**
   * @param columnGuid
   * @param [options] The optional parameters
   * @returns Promise<Models.GetColumnCardsResponse>
   */
  getColumnCards(columnGuid: string, options?: msRest.RequestOptionsBase): Promise<Models.GetColumnCardsResponse>;
  /**
   * @param columnGuid
   * @param callback The callback
   */
  getColumnCards(columnGuid: string, callback: msRest.ServiceCallback<Models.GetColumnCardsOKResponse>): void;
  /**
   * @param columnGuid
   * @param options The optional parameters
   * @param callback The callback
   */
  getColumnCards(columnGuid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetColumnCardsOKResponse>): void;
  getColumnCards(columnGuid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetColumnCardsOKResponse>, callback?: msRest.ServiceCallback<Models.GetColumnCardsOKResponse>): Promise<Models.GetColumnCardsResponse> {
    return this.sendOperationRequest(
      {
        columnGuid,
        options
      },
      getColumnCardsOperationSpec,
      callback) as Promise<Models.GetColumnCardsResponse>;
  }

  /**
   * @param owner
   * @param alias
   * @param [options] The optional parameters
   * @returns Promise<Models.GetProjectByAliasResponse>
   */
  getProjectByAlias(owner: string, alias: string, options?: msRest.RequestOptionsBase): Promise<Models.GetProjectByAliasResponse>;
  /**
   * @param owner
   * @param alias
   * @param callback The callback
   */
  getProjectByAlias(owner: string, alias: string, callback: msRest.ServiceCallback<Models.GetProjectByAliasOKResponse>): void;
  /**
   * @param owner
   * @param alias
   * @param options The optional parameters
   * @param callback The callback
   */
  getProjectByAlias(owner: string, alias: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetProjectByAliasOKResponse>): void;
  getProjectByAlias(owner: string, alias: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetProjectByAliasOKResponse>, callback?: msRest.ServiceCallback<Models.GetProjectByAliasOKResponse>): Promise<Models.GetProjectByAliasResponse> {
    return this.sendOperationRequest(
      {
        owner,
        alias,
        options
      },
      getProjectByAliasOperationSpec,
      callback) as Promise<Models.GetProjectByAliasResponse>;
  }

  /**
   * @param apiToken
   * @param columnGuid
   * @param name
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCardResponse>
   */
  createCard(apiToken: string, columnGuid: string, name: string, options?: Models.SupportHubApiCreateCardOptionalParams): Promise<Models.CreateCardResponse>;
  /**
   * @param apiToken
   * @param columnGuid
   * @param name
   * @param callback The callback
   */
  createCard(apiToken: string, columnGuid: string, name: string, callback: msRest.ServiceCallback<Models.CreateCardCreatedResponse>): void;
  /**
   * @param apiToken
   * @param columnGuid
   * @param name
   * @param options The optional parameters
   * @param callback The callback
   */
  createCard(apiToken: string, columnGuid: string, name: string, options: Models.SupportHubApiCreateCardOptionalParams, callback: msRest.ServiceCallback<Models.CreateCardCreatedResponse>): void;
  createCard(apiToken: string, columnGuid: string, name: string, options?: Models.SupportHubApiCreateCardOptionalParams | msRest.ServiceCallback<Models.CreateCardCreatedResponse>, callback?: msRest.ServiceCallback<Models.CreateCardCreatedResponse>): Promise<Models.CreateCardResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        columnGuid,
        name,
        options
      },
      createCardOperationSpec,
      callback) as Promise<Models.CreateCardResponse>;
  }

  /**
   * @param apiToken
   * @param cardGuid
   * @param [options] The optional parameters
   * @returns Promise<Models.EditCardResponse>
   */
  editCard(apiToken: string, cardGuid: string, options?: Models.SupportHubApiEditCardOptionalParams): Promise<Models.EditCardResponse>;
  /**
   * @param apiToken
   * @param cardGuid
   * @param callback The callback
   */
  editCard(apiToken: string, cardGuid: string, callback: msRest.ServiceCallback<Models.EditCardOKResponse>): void;
  /**
   * @param apiToken
   * @param cardGuid
   * @param options The optional parameters
   * @param callback The callback
   */
  editCard(apiToken: string, cardGuid: string, options: Models.SupportHubApiEditCardOptionalParams, callback: msRest.ServiceCallback<Models.EditCardOKResponse>): void;
  editCard(apiToken: string, cardGuid: string, options?: Models.SupportHubApiEditCardOptionalParams | msRest.ServiceCallback<Models.EditCardOKResponse>, callback?: msRest.ServiceCallback<Models.EditCardOKResponse>): Promise<Models.EditCardResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        cardGuid,
        options
      },
      editCardOperationSpec,
      callback) as Promise<Models.EditCardResponse>;
  }

  /**
   * @param cardGuid
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCardWorkResponse>
   */
  getCardWork(cardGuid: string, options?: msRest.RequestOptionsBase): Promise<Models.GetCardWorkResponse>;
  /**
   * @param cardGuid
   * @param callback The callback
   */
  getCardWork(cardGuid: string, callback: msRest.ServiceCallback<Models.GetCardWorkOKResponse>): void;
  /**
   * @param cardGuid
   * @param options The optional parameters
   * @param callback The callback
   */
  getCardWork(cardGuid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetCardWorkOKResponse>): void;
  getCardWork(cardGuid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetCardWorkOKResponse>, callback?: msRest.ServiceCallback<Models.GetCardWorkOKResponse>): Promise<Models.GetCardWorkResponse> {
    return this.sendOperationRequest(
      {
        cardGuid,
        options
      },
      getCardWorkOperationSpec,
      callback) as Promise<Models.GetCardWorkResponse>;
  }

  /**
   * @param entityGuid
   * @param [options] The optional parameters
   * @returns Promise<Models.GetEntityFundingBalancesResponse>
   */
  getEntityFundingBalances(entityGuid: string, options?: msRest.RequestOptionsBase): Promise<Models.GetEntityFundingBalancesResponse>;
  /**
   * @param entityGuid
   * @param callback The callback
   */
  getEntityFundingBalances(entityGuid: string, callback: msRest.ServiceCallback<Models.GetEntityFundingBalancesOKResponse>): void;
  /**
   * @param entityGuid
   * @param options The optional parameters
   * @param callback The callback
   */
  getEntityFundingBalances(entityGuid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetEntityFundingBalancesOKResponse>): void;
  getEntityFundingBalances(entityGuid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetEntityFundingBalancesOKResponse>, callback?: msRest.ServiceCallback<Models.GetEntityFundingBalancesOKResponse>): Promise<Models.GetEntityFundingBalancesResponse> {
    return this.sendOperationRequest(
      {
        entityGuid,
        options
      },
      getEntityFundingBalancesOperationSpec,
      callback) as Promise<Models.GetEntityFundingBalancesResponse>;
  }

  /**
   * @param cardGuid
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCardProjectResponse>
   */
  getCardProject(cardGuid: string, options?: msRest.RequestOptionsBase): Promise<Models.GetCardProjectResponse>;
  /**
   * @param cardGuid
   * @param callback The callback
   */
  getCardProject(cardGuid: string, callback: msRest.ServiceCallback<Models.GetCardProjectOKResponse>): void;
  /**
   * @param cardGuid
   * @param options The optional parameters
   * @param callback The callback
   */
  getCardProject(cardGuid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetCardProjectOKResponse>): void;
  getCardProject(cardGuid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetCardProjectOKResponse>, callback?: msRest.ServiceCallback<Models.GetCardProjectOKResponse>): Promise<Models.GetCardProjectResponse> {
    return this.sendOperationRequest(
      {
        cardGuid,
        options
      },
      getCardProjectOperationSpec,
      callback) as Promise<Models.GetCardProjectResponse>;
  }

  /**
   * @param projectGuid
   * @param [options] The optional parameters
   * @returns Promise<Models.GetProjectWorkTypesResponse>
   */
  getProjectWorkTypes(projectGuid: string, options?: msRest.RequestOptionsBase): Promise<Models.GetProjectWorkTypesResponse>;
  /**
   * @param projectGuid
   * @param callback The callback
   */
  getProjectWorkTypes(projectGuid: string, callback: msRest.ServiceCallback<Models.GetProjectWorkTypesOKResponse>): void;
  /**
   * @param projectGuid
   * @param options The optional parameters
   * @param callback The callback
   */
  getProjectWorkTypes(projectGuid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetProjectWorkTypesOKResponse>): void;
  getProjectWorkTypes(projectGuid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetProjectWorkTypesOKResponse>, callback?: msRest.ServiceCallback<Models.GetProjectWorkTypesOKResponse>): Promise<Models.GetProjectWorkTypesResponse> {
    return this.sendOperationRequest(
      {
        projectGuid,
        options
      },
      getProjectWorkTypesOperationSpec,
      callback) as Promise<Models.GetProjectWorkTypesResponse>;
  }

  /**
   * @param apiToken JWT token
   * @param cardGuid
   * @param workTypeGuid
   * @param proof
   * @param [options] The optional parameters
   * @returns Promise<Models.PostSubmitCardWorkResponse>
   */
  postSubmitCardWork(apiToken: string, cardGuid: string, workTypeGuid: string, proof: string, options?: msRest.RequestOptionsBase): Promise<Models.PostSubmitCardWorkResponse>;
  /**
   * @param apiToken JWT token
   * @param cardGuid
   * @param workTypeGuid
   * @param proof
   * @param callback The callback
   */
  postSubmitCardWork(apiToken: string, cardGuid: string, workTypeGuid: string, proof: string, callback: msRest.ServiceCallback<Models.PostSubmitCardWorkOKResponse>): void;
  /**
   * @param apiToken JWT token
   * @param cardGuid
   * @param workTypeGuid
   * @param proof
   * @param options The optional parameters
   * @param callback The callback
   */
  postSubmitCardWork(apiToken: string, cardGuid: string, workTypeGuid: string, proof: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PostSubmitCardWorkOKResponse>): void;
  postSubmitCardWork(apiToken: string, cardGuid: string, workTypeGuid: string, proof: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PostSubmitCardWorkOKResponse>, callback?: msRest.ServiceCallback<Models.PostSubmitCardWorkOKResponse>): Promise<Models.PostSubmitCardWorkResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        cardGuid,
        workTypeGuid,
        proof,
        options
      },
      postSubmitCardWorkOperationSpec,
      callback) as Promise<Models.PostSubmitCardWorkResponse>;
  }

  /**
   * @param apiToken JWT token
   * @param entityGuid
   * @param amount
   * @param currencyType Possible values include: 'Usd', 'BitCoin', 'Ethereum', 'Erc20Token',
   * 'Waves', 'WavesToken', 'LiteCoin'
   * @param [options] The optional parameters
   * @returns Promise<Models.PostInvoiceResponse>
   */
  postInvoice(apiToken: string, entityGuid: string, amount: number, currencyType: Models.CurrencyType5, options?: msRest.RequestOptionsBase): Promise<Models.PostInvoiceResponse>;
  /**
   * @param apiToken JWT token
   * @param entityGuid
   * @param amount
   * @param currencyType Possible values include: 'Usd', 'BitCoin', 'Ethereum', 'Erc20Token',
   * 'Waves', 'WavesToken', 'LiteCoin'
   * @param callback The callback
   */
  postInvoice(apiToken: string, entityGuid: string, amount: number, currencyType: Models.CurrencyType5, callback: msRest.ServiceCallback<Models.PostInvoiceCreatedResponse>): void;
  /**
   * @param apiToken JWT token
   * @param entityGuid
   * @param amount
   * @param currencyType Possible values include: 'Usd', 'BitCoin', 'Ethereum', 'Erc20Token',
   * 'Waves', 'WavesToken', 'LiteCoin'
   * @param options The optional parameters
   * @param callback The callback
   */
  postInvoice(apiToken: string, entityGuid: string, amount: number, currencyType: Models.CurrencyType5, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PostInvoiceCreatedResponse>): void;
  postInvoice(apiToken: string, entityGuid: string, amount: number, currencyType: Models.CurrencyType5, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PostInvoiceCreatedResponse>, callback?: msRest.ServiceCallback<Models.PostInvoiceCreatedResponse>): Promise<Models.PostInvoiceResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        entityGuid,
        amount,
        currencyType,
        options
      },
      postInvoiceOperationSpec,
      callback) as Promise<Models.PostInvoiceResponse>;
  }

  /**
   * @param apiToken JWT token
   * @param invoiceGuid
   * @param [options] The optional parameters
   * @returns Promise<Models.GetMyInvoiceResponse>
   */
  getMyInvoice(apiToken: string, invoiceGuid: string, options?: msRest.RequestOptionsBase): Promise<Models.GetMyInvoiceResponse>;
  /**
   * @param apiToken JWT token
   * @param invoiceGuid
   * @param callback The callback
   */
  getMyInvoice(apiToken: string, invoiceGuid: string, callback: msRest.ServiceCallback<Models.GetMyInvoiceOKResponse>): void;
  /**
   * @param apiToken JWT token
   * @param invoiceGuid
   * @param options The optional parameters
   * @param callback The callback
   */
  getMyInvoice(apiToken: string, invoiceGuid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetMyInvoiceOKResponse>): void;
  getMyInvoice(apiToken: string, invoiceGuid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetMyInvoiceOKResponse>, callback?: msRest.ServiceCallback<Models.GetMyInvoiceOKResponse>): Promise<Models.GetMyInvoiceResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        invoiceGuid,
        options
      },
      getMyInvoiceOperationSpec,
      callback) as Promise<Models.GetMyInvoiceResponse>;
  }

  /**
   * @param apiToken JWT token
   * @param [options] The optional parameters
   * @returns Promise<Models.GetMyActiveInvoicesResponse>
   */
  getMyActiveInvoices(apiToken: string, options?: msRest.RequestOptionsBase): Promise<Models.GetMyActiveInvoicesResponse>;
  /**
   * @param apiToken JWT token
   * @param callback The callback
   */
  getMyActiveInvoices(apiToken: string, callback: msRest.ServiceCallback<Models.GetMyActiveInvoicesOKResponse>): void;
  /**
   * @param apiToken JWT token
   * @param options The optional parameters
   * @param callback The callback
   */
  getMyActiveInvoices(apiToken: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetMyActiveInvoicesOKResponse>): void;
  getMyActiveInvoices(apiToken: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetMyActiveInvoicesOKResponse>, callback?: msRest.ServiceCallback<Models.GetMyActiveInvoicesOKResponse>): Promise<Models.GetMyActiveInvoicesResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        options
      },
      getMyActiveInvoicesOperationSpec,
      callback) as Promise<Models.GetMyActiveInvoicesResponse>;
  }

  /**
   * @param apiToken JWT token
   * @param [options] The optional parameters
   * @returns Promise<Models.GetMyFinishedInvoicesResponse>
   */
  getMyFinishedInvoices(apiToken: string, options?: msRest.RequestOptionsBase): Promise<Models.GetMyFinishedInvoicesResponse>;
  /**
   * @param apiToken JWT token
   * @param callback The callback
   */
  getMyFinishedInvoices(apiToken: string, callback: msRest.ServiceCallback<Models.GetMyFinishedInvoicesOKResponse>): void;
  /**
   * @param apiToken JWT token
   * @param options The optional parameters
   * @param callback The callback
   */
  getMyFinishedInvoices(apiToken: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetMyFinishedInvoicesOKResponse>): void;
  getMyFinishedInvoices(apiToken: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetMyFinishedInvoicesOKResponse>, callback?: msRest.ServiceCallback<Models.GetMyFinishedInvoicesOKResponse>): Promise<Models.GetMyFinishedInvoicesResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        options
      },
      getMyFinishedInvoicesOperationSpec,
      callback) as Promise<Models.GetMyFinishedInvoicesResponse>;
  }

  /**
   * @param apiToken JWT token
   * @param invoiceGuid
   * @param status
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchMyInvoiceResponse>
   */
  patchMyInvoice(apiToken: string, invoiceGuid: string, status: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchMyInvoiceResponse>;
  /**
   * @param apiToken JWT token
   * @param invoiceGuid
   * @param status
   * @param callback The callback
   */
  patchMyInvoice(apiToken: string, invoiceGuid: string, status: string, callback: msRest.ServiceCallback<Models.PatchMyInvoiceOKResponse>): void;
  /**
   * @param apiToken JWT token
   * @param invoiceGuid
   * @param status
   * @param options The optional parameters
   * @param callback The callback
   */
  patchMyInvoice(apiToken: string, invoiceGuid: string, status: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PatchMyInvoiceOKResponse>): void;
  patchMyInvoice(apiToken: string, invoiceGuid: string, status: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PatchMyInvoiceOKResponse>, callback?: msRest.ServiceCallback<Models.PatchMyInvoiceOKResponse>): Promise<Models.PatchMyInvoiceResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        invoiceGuid,
        status,
        options
      },
      patchMyInvoiceOperationSpec,
      callback) as Promise<Models.PatchMyInvoiceResponse>;
  }

  /**
   * @param apiToken JWT token
   * @param [options] The optional parameters
   * @returns Promise<Models.GetMyBalancesResponse>
   */
  getMyBalances(apiToken: string, options?: msRest.RequestOptionsBase): Promise<Models.GetMyBalancesResponse>;
  /**
   * @param apiToken JWT token
   * @param callback The callback
   */
  getMyBalances(apiToken: string, callback: msRest.ServiceCallback<Models.GetMyBalancesOKResponse>): void;
  /**
   * @param apiToken JWT token
   * @param options The optional parameters
   * @param callback The callback
   */
  getMyBalances(apiToken: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetMyBalancesOKResponse>): void;
  getMyBalances(apiToken: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetMyBalancesOKResponse>, callback?: msRest.ServiceCallback<Models.GetMyBalancesOKResponse>): Promise<Models.GetMyBalancesResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        options
      },
      getMyBalancesOperationSpec,
      callback) as Promise<Models.GetMyBalancesResponse>;
  }

  /**
   * @param apiToken JWT token
   * @param key Setting name
   * @param [options] The optional parameters
   * @returns Promise<Models.GetMySettingResponse>
   */
  getMySetting(apiToken: string, key: string, options?: msRest.RequestOptionsBase): Promise<Models.GetMySettingResponse>;
  /**
   * @param apiToken JWT token
   * @param key Setting name
   * @param callback The callback
   */
  getMySetting(apiToken: string, key: string, callback: msRest.ServiceCallback<Models.GetMySettingOKResponse>): void;
  /**
   * @param apiToken JWT token
   * @param key Setting name
   * @param options The optional parameters
   * @param callback The callback
   */
  getMySetting(apiToken: string, key: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetMySettingOKResponse>): void;
  getMySetting(apiToken: string, key: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetMySettingOKResponse>, callback?: msRest.ServiceCallback<Models.GetMySettingOKResponse>): Promise<Models.GetMySettingResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        key,
        options
      },
      getMySettingOperationSpec,
      callback) as Promise<Models.GetMySettingResponse>;
  }

  /**
   * @param apiToken JWT token
   * @param key Setting name
   * @param value Setting value
   * @param [options] The optional parameters
   * @returns Promise<Models.SetMySettingResponse>
   */
  setMySetting(apiToken: string, key: string, value: string, options?: msRest.RequestOptionsBase): Promise<Models.SetMySettingResponse>;
  /**
   * @param apiToken JWT token
   * @param key Setting name
   * @param value Setting value
   * @param callback The callback
   */
  setMySetting(apiToken: string, key: string, value: string, callback: msRest.ServiceCallback<Models.SetMySettingOKResponse>): void;
  /**
   * @param apiToken JWT token
   * @param key Setting name
   * @param value Setting value
   * @param options The optional parameters
   * @param callback The callback
   */
  setMySetting(apiToken: string, key: string, value: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SetMySettingOKResponse>): void;
  setMySetting(apiToken: string, key: string, value: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SetMySettingOKResponse>, callback?: msRest.ServiceCallback<Models.SetMySettingOKResponse>): Promise<Models.SetMySettingResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        key,
        value,
        options
      },
      setMySettingOperationSpec,
      callback) as Promise<Models.SetMySettingResponse>;
  }

  /**
   * @param apiToken JWT token
   * @param [options] The optional parameters
   * @returns Promise<Models.GetMyLibraryProjectsResponse>
   */
  getMyLibraryProjects(apiToken: string, options?: msRest.RequestOptionsBase): Promise<Models.GetMyLibraryProjectsResponse>;
  /**
   * @param apiToken JWT token
   * @param callback The callback
   */
  getMyLibraryProjects(apiToken: string, callback: msRest.ServiceCallback<Models.GetMyLibraryProjectsOKResponse>): void;
  /**
   * @param apiToken JWT token
   * @param options The optional parameters
   * @param callback The callback
   */
  getMyLibraryProjects(apiToken: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetMyLibraryProjectsOKResponse>): void;
  getMyLibraryProjects(apiToken: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetMyLibraryProjectsOKResponse>, callback?: msRest.ServiceCallback<Models.GetMyLibraryProjectsOKResponse>): Promise<Models.GetMyLibraryProjectsResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        options
      },
      getMyLibraryProjectsOperationSpec,
      callback) as Promise<Models.GetMyLibraryProjectsResponse>;
  }

  /**
   * @param apiToken JWT token
   * @param projectGuid
   * @param [options] The optional parameters
   * @returns Promise<Models.AddProjectToMyLibraryResponse>
   */
  addProjectToMyLibrary(apiToken: string, projectGuid: string, options?: msRest.RequestOptionsBase): Promise<Models.AddProjectToMyLibraryResponse>;
  /**
   * @param apiToken JWT token
   * @param projectGuid
   * @param callback The callback
   */
  addProjectToMyLibrary(apiToken: string, projectGuid: string, callback: msRest.ServiceCallback<Models.AddProjectToMyLibraryCreatedResponse>): void;
  /**
   * @param apiToken JWT token
   * @param projectGuid
   * @param options The optional parameters
   * @param callback The callback
   */
  addProjectToMyLibrary(apiToken: string, projectGuid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AddProjectToMyLibraryCreatedResponse>): void;
  addProjectToMyLibrary(apiToken: string, projectGuid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AddProjectToMyLibraryCreatedResponse>, callback?: msRest.ServiceCallback<Models.AddProjectToMyLibraryCreatedResponse>): Promise<Models.AddProjectToMyLibraryResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        projectGuid,
        options
      },
      addProjectToMyLibraryOperationSpec,
      callback) as Promise<Models.AddProjectToMyLibraryResponse>;
  }

  /**
   * @param apiToken JWT token
   * @param projectGuid
   * @param [options] The optional parameters
   * @returns Promise<Models.RemoveProjectFromMyLibraryResponse>
   */
  removeProjectFromMyLibrary(apiToken: string, projectGuid: string, options?: msRest.RequestOptionsBase): Promise<Models.RemoveProjectFromMyLibraryResponse>;
  /**
   * @param apiToken JWT token
   * @param projectGuid
   * @param callback The callback
   */
  removeProjectFromMyLibrary(apiToken: string, projectGuid: string, callback: msRest.ServiceCallback<Models.RemoveProjectFromMyLibraryOKResponse>): void;
  /**
   * @param apiToken JWT token
   * @param projectGuid
   * @param options The optional parameters
   * @param callback The callback
   */
  removeProjectFromMyLibrary(apiToken: string, projectGuid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RemoveProjectFromMyLibraryOKResponse>): void;
  removeProjectFromMyLibrary(apiToken: string, projectGuid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RemoveProjectFromMyLibraryOKResponse>, callback?: msRest.ServiceCallback<Models.RemoveProjectFromMyLibraryOKResponse>): Promise<Models.RemoveProjectFromMyLibraryResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        projectGuid,
        options
      },
      removeProjectFromMyLibraryOperationSpec,
      callback) as Promise<Models.RemoveProjectFromMyLibraryResponse>;
  }

  /**
   * @param apiToken
   * @param projectGuid
   * @param [options] The optional parameters
   * @returns Promise<Models.GetMyLibraryProjectStatusResponse>
   */
  getMyLibraryProjectStatus(apiToken: string, projectGuid: string, options?: msRest.RequestOptionsBase): Promise<Models.GetMyLibraryProjectStatusResponse>;
  /**
   * @param apiToken
   * @param projectGuid
   * @param callback The callback
   */
  getMyLibraryProjectStatus(apiToken: string, projectGuid: string, callback: msRest.ServiceCallback<Models.GetMyLibraryProjectStatusOKResponse>): void;
  /**
   * @param apiToken
   * @param projectGuid
   * @param options The optional parameters
   * @param callback The callback
   */
  getMyLibraryProjectStatus(apiToken: string, projectGuid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetMyLibraryProjectStatusOKResponse>): void;
  getMyLibraryProjectStatus(apiToken: string, projectGuid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetMyLibraryProjectStatusOKResponse>, callback?: msRest.ServiceCallback<Models.GetMyLibraryProjectStatusOKResponse>): Promise<Models.GetMyLibraryProjectStatusResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        projectGuid,
        options
      },
      getMyLibraryProjectStatusOperationSpec,
      callback) as Promise<Models.GetMyLibraryProjectStatusResponse>;
  }

  /**
   * @param apiToken JWT token
   * @param [options] The optional parameters
   * @returns Promise<Models.GetMeResponse>
   */
  getMe(apiToken: string, options?: msRest.RequestOptionsBase): Promise<Models.GetMeResponse>;
  /**
   * @param apiToken JWT token
   * @param callback The callback
   */
  getMe(apiToken: string, callback: msRest.ServiceCallback<Models.GetMeOKResponse>): void;
  /**
   * @param apiToken JWT token
   * @param options The optional parameters
   * @param callback The callback
   */
  getMe(apiToken: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetMeOKResponse>): void;
  getMe(apiToken: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetMeOKResponse>, callback?: msRest.ServiceCallback<Models.GetMeOKResponse>): Promise<Models.GetMeResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        options
      },
      getMeOperationSpec,
      callback) as Promise<Models.GetMeResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.GetUserResponse>
   */
  getUser(options?: msRest.RequestOptionsBase): Promise<Models.GetUserResponse>;
  /**
   * @param callback The callback
   */
  getUser(callback: msRest.ServiceCallback<Models.GetUserOKResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getUser(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetUserOKResponse>): void;
  getUser(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetUserOKResponse>, callback?: msRest.ServiceCallback<Models.GetUserOKResponse>): Promise<Models.GetUserResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getUserOperationSpec,
      callback) as Promise<Models.GetUserResponse>;
  }

  /**
   * @param facebookToken Facebook token
   * @param [options] The optional parameters
   * @returns Promise<Models.LoginViaFacebookResponse>
   */
  loginViaFacebook(facebookToken: string, options?: msRest.RequestOptionsBase): Promise<Models.LoginViaFacebookResponse>;
  /**
   * @param facebookToken Facebook token
   * @param callback The callback
   */
  loginViaFacebook(facebookToken: string, callback: msRest.ServiceCallback<Models.LoginViaFacebookOKResponse>): void;
  /**
   * @param facebookToken Facebook token
   * @param options The optional parameters
   * @param callback The callback
   */
  loginViaFacebook(facebookToken: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LoginViaFacebookOKResponse>): void;
  loginViaFacebook(facebookToken: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LoginViaFacebookOKResponse>, callback?: msRest.ServiceCallback<Models.LoginViaFacebookOKResponse>): Promise<Models.LoginViaFacebookResponse> {
    return this.sendOperationRequest(
      {
        facebookToken,
        options
      },
      loginViaFacebookOperationSpec,
      callback) as Promise<Models.LoginViaFacebookResponse>;
  }

  /**
   * @param googleToken Google JWT token
   * @param [options] The optional parameters
   * @returns Promise<Models.LoginViaGoogleResponse>
   */
  loginViaGoogle(googleToken: string, options?: msRest.RequestOptionsBase): Promise<Models.LoginViaGoogleResponse>;
  /**
   * @param googleToken Google JWT token
   * @param callback The callback
   */
  loginViaGoogle(googleToken: string, callback: msRest.ServiceCallback<Models.LoginViaGoogleOKResponse>): void;
  /**
   * @param googleToken Google JWT token
   * @param options The optional parameters
   * @param callback The callback
   */
  loginViaGoogle(googleToken: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LoginViaGoogleOKResponse>): void;
  loginViaGoogle(googleToken: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LoginViaGoogleOKResponse>, callback?: msRest.ServiceCallback<Models.LoginViaGoogleOKResponse>): Promise<Models.LoginViaGoogleResponse> {
    return this.sendOperationRequest(
      {
        googleToken,
        options
      },
      loginViaGoogleOperationSpec,
      callback) as Promise<Models.LoginViaGoogleResponse>;
  }

  /**
   * @param apiToken JWT token
   * @param entityGuid
   * @param [options] The optional parameters
   * @returns Promise<Models.GetMyEntityPermissionsResponse>
   */
  getMyEntityPermissions(apiToken: string, entityGuid: string, options?: msRest.RequestOptionsBase): Promise<Models.GetMyEntityPermissionsResponse>;
  /**
   * @param apiToken JWT token
   * @param entityGuid
   * @param callback The callback
   */
  getMyEntityPermissions(apiToken: string, entityGuid: string, callback: msRest.ServiceCallback<Models.GetMyEntityPermissionsOKResponse>): void;
  /**
   * @param apiToken JWT token
   * @param entityGuid
   * @param options The optional parameters
   * @param callback The callback
   */
  getMyEntityPermissions(apiToken: string, entityGuid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetMyEntityPermissionsOKResponse>): void;
  getMyEntityPermissions(apiToken: string, entityGuid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetMyEntityPermissionsOKResponse>, callback?: msRest.ServiceCallback<Models.GetMyEntityPermissionsOKResponse>): Promise<Models.GetMyEntityPermissionsResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        entityGuid,
        options
      },
      getMyEntityPermissionsOperationSpec,
      callback) as Promise<Models.GetMyEntityPermissionsResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.GetNewestProjectsResponse>
   */
  getNewestProjects(options?: msRest.RequestOptionsBase): Promise<Models.GetNewestProjectsResponse>;
  /**
   * @param callback The callback
   */
  getNewestProjects(callback: msRest.ServiceCallback<Models.GetNewestProjectsOKResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getNewestProjects(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetNewestProjectsOKResponse>): void;
  getNewestProjects(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetNewestProjectsOKResponse>, callback?: msRest.ServiceCallback<Models.GetNewestProjectsOKResponse>): Promise<Models.GetNewestProjectsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getNewestProjectsOperationSpec,
      callback) as Promise<Models.GetNewestProjectsResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.GetRandomProjectsResponse>
   */
  getRandomProjects(options?: msRest.RequestOptionsBase): Promise<Models.GetRandomProjectsResponse>;
  /**
   * @param callback The callback
   */
  getRandomProjects(callback: msRest.ServiceCallback<Models.GetRandomProjectsOKResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getRandomProjects(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetRandomProjectsOKResponse>): void;
  getRandomProjects(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetRandomProjectsOKResponse>, callback?: msRest.ServiceCallback<Models.GetRandomProjectsOKResponse>): Promise<Models.GetRandomProjectsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getRandomProjectsOperationSpec,
      callback) as Promise<Models.GetRandomProjectsResponse>;
  }

  /**
   * @param projectGuid
   * @param [options] The optional parameters
   * @returns Promise<Models.GetProjectProductsResponse>
   */
  getProjectProducts(projectGuid: string, options?: msRest.RequestOptionsBase): Promise<Models.GetProjectProductsResponse>;
  /**
   * @param projectGuid
   * @param callback The callback
   */
  getProjectProducts(projectGuid: string, callback: msRest.ServiceCallback<Models.GetProjectProductsOKResponse>): void;
  /**
   * @param projectGuid
   * @param options The optional parameters
   * @param callback The callback
   */
  getProjectProducts(projectGuid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetProjectProductsOKResponse>): void;
  getProjectProducts(projectGuid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetProjectProductsOKResponse>, callback?: msRest.ServiceCallback<Models.GetProjectProductsOKResponse>): Promise<Models.GetProjectProductsResponse> {
    return this.sendOperationRequest(
      {
        projectGuid,
        options
      },
      getProjectProductsOperationSpec,
      callback) as Promise<Models.GetProjectProductsResponse>;
  }

  /**
   * @param apiToken JWT token
   * @param projectGuid
   * @param name
   * @param description
   * @param usdPrice
   * @param url
   * @param useUrl
   * @param [options] The optional parameters
   * @returns Promise<Models.PostProjectProductResponse>
   */
  postProjectProduct(apiToken: string, projectGuid: string, name: string, description: string, usdPrice: number, url: string, useUrl: string, options?: Models.SupportHubApiPostProjectProductOptionalParams): Promise<Models.PostProjectProductResponse>;
  /**
   * @param apiToken JWT token
   * @param projectGuid
   * @param name
   * @param description
   * @param usdPrice
   * @param url
   * @param useUrl
   * @param callback The callback
   */
  postProjectProduct(apiToken: string, projectGuid: string, name: string, description: string, usdPrice: number, url: string, useUrl: string, callback: msRest.ServiceCallback<Models.PostProjectProductCreatedResponse>): void;
  /**
   * @param apiToken JWT token
   * @param projectGuid
   * @param name
   * @param description
   * @param usdPrice
   * @param url
   * @param useUrl
   * @param options The optional parameters
   * @param callback The callback
   */
  postProjectProduct(apiToken: string, projectGuid: string, name: string, description: string, usdPrice: number, url: string, useUrl: string, options: Models.SupportHubApiPostProjectProductOptionalParams, callback: msRest.ServiceCallback<Models.PostProjectProductCreatedResponse>): void;
  postProjectProduct(apiToken: string, projectGuid: string, name: string, description: string, usdPrice: number, url: string, useUrl: string, options?: Models.SupportHubApiPostProjectProductOptionalParams | msRest.ServiceCallback<Models.PostProjectProductCreatedResponse>, callback?: msRest.ServiceCallback<Models.PostProjectProductCreatedResponse>): Promise<Models.PostProjectProductResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        projectGuid,
        name,
        description,
        usdPrice,
        url,
        useUrl,
        options
      },
      postProjectProductOperationSpec,
      callback) as Promise<Models.PostProjectProductResponse>;
  }

  /**
   * @param apiToken JWT token
   * @param productGuid
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteProjectProductResponse>
   */
  deleteProjectProduct(apiToken: string, productGuid: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteProjectProductResponse>;
  /**
   * @param apiToken JWT token
   * @param productGuid
   * @param callback The callback
   */
  deleteProjectProduct(apiToken: string, productGuid: string, callback: msRest.ServiceCallback<Models.DeleteProjectProductOKResponse>): void;
  /**
   * @param apiToken JWT token
   * @param productGuid
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteProjectProduct(apiToken: string, productGuid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeleteProjectProductOKResponse>): void;
  deleteProjectProduct(apiToken: string, productGuid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeleteProjectProductOKResponse>, callback?: msRest.ServiceCallback<Models.DeleteProjectProductOKResponse>): Promise<Models.DeleteProjectProductResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        productGuid,
        options
      },
      deleteProjectProductOperationSpec,
      callback) as Promise<Models.DeleteProjectProductResponse>;
  }

  /**
   * @param apiToken JWT token
   * @param [options] The optional parameters
   * @returns Promise<Models.GetMyWithdrawalRequestsResponse>
   */
  getMyWithdrawalRequests(apiToken: string, options?: msRest.RequestOptionsBase): Promise<Models.GetMyWithdrawalRequestsResponse>;
  /**
   * @param apiToken JWT token
   * @param callback The callback
   */
  getMyWithdrawalRequests(apiToken: string, callback: msRest.ServiceCallback<Models.GetMyWithdrawalRequestsOKResponse>): void;
  /**
   * @param apiToken JWT token
   * @param options The optional parameters
   * @param callback The callback
   */
  getMyWithdrawalRequests(apiToken: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetMyWithdrawalRequestsOKResponse>): void;
  getMyWithdrawalRequests(apiToken: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetMyWithdrawalRequestsOKResponse>, callback?: msRest.ServiceCallback<Models.GetMyWithdrawalRequestsOKResponse>): Promise<Models.GetMyWithdrawalRequestsResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        options
      },
      getMyWithdrawalRequestsOperationSpec,
      callback) as Promise<Models.GetMyWithdrawalRequestsResponse>;
  }

  /**
   * @param apiToken JWT token
   * @param amount
   * @param address
   * @param currencyType Possible values include: 'Usd', 'BitCoin', 'Ethereum', 'Erc20Token',
   * 'Waves', 'WavesToken', 'LiteCoin'
   * @param [options] The optional parameters
   * @returns Promise<Models.PostWithdrawalRequestResponse>
   */
  postWithdrawalRequest(apiToken: string, amount: number, address: string, currencyType: Models.CurrencyType6, options?: msRest.RequestOptionsBase): Promise<Models.PostWithdrawalRequestResponse>;
  /**
   * @param apiToken JWT token
   * @param amount
   * @param address
   * @param currencyType Possible values include: 'Usd', 'BitCoin', 'Ethereum', 'Erc20Token',
   * 'Waves', 'WavesToken', 'LiteCoin'
   * @param callback The callback
   */
  postWithdrawalRequest(apiToken: string, amount: number, address: string, currencyType: Models.CurrencyType6, callback: msRest.ServiceCallback<Models.PostWithdrawalRequestCreatedResponse>): void;
  /**
   * @param apiToken JWT token
   * @param amount
   * @param address
   * @param currencyType Possible values include: 'Usd', 'BitCoin', 'Ethereum', 'Erc20Token',
   * 'Waves', 'WavesToken', 'LiteCoin'
   * @param options The optional parameters
   * @param callback The callback
   */
  postWithdrawalRequest(apiToken: string, amount: number, address: string, currencyType: Models.CurrencyType6, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PostWithdrawalRequestCreatedResponse>): void;
  postWithdrawalRequest(apiToken: string, amount: number, address: string, currencyType: Models.CurrencyType6, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PostWithdrawalRequestCreatedResponse>, callback?: msRest.ServiceCallback<Models.PostWithdrawalRequestCreatedResponse>): Promise<Models.PostWithdrawalRequestResponse> {
    return this.sendOperationRequest(
      {
        apiToken,
        amount,
        address,
        currencyType,
        options
      },
      postWithdrawalRequestOperationSpec,
      callback) as Promise<Models.PostWithdrawalRequestResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getLoginOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/login",
  queryParameters: [
    Parameters.email0,
    Parameters.password0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetLoginOKResponse
    },
    default: {}
  },
  serializer
};

const postRegisterOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/register",
  queryParameters: [
    Parameters.login,
    Parameters.email1,
    Parameters.password1,
    Parameters.referralKey
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PostRegisterOKResponse
    },
    default: {}
  },
  serializer
};

const postConfirmEmailOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/register/confirm_email",
  queryParameters: [
    Parameters.confirmationKey
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PostConfirmEmailOKResponse
    },
    default: {}
  },
  serializer
};

const getGitHubLoginLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/auth/github/login_link/get",
  responses: {
    200: {
      bodyMapper: Mappers.GetGitHubLoginLinkOKResponse
    },
    default: {}
  },
  serializer
};

const getGitHubAuthTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/auth/github/get_auth_token",
  queryParameters: [
    Parameters.code
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetGitHubAuthTokenOKResponse
    },
    default: {}
  },
  serializer
};

const getGitLabLoginLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/auth/gitlab/login_link/get",
  responses: {
    200: {
      bodyMapper: Mappers.GetGitLabLoginLinkOKResponse
    },
    default: {}
  },
  serializer
};

const getGitLabAuthTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/auth/gitlab/get_auth_token",
  queryParameters: [
    Parameters.accessToken
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetGitLabAuthTokenOKResponse
    },
    default: {}
  },
  serializer
};

const getMeExternalRepositoriesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/me/external/repositories/get",
  queryParameters: [
    Parameters.apiToken
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetMeExternalRepositoriesOKResponse
    },
    default: {}
  },
  serializer
};

const getMyIntegrationsStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/me/integrations/status/get",
  queryParameters: [
    Parameters.apiToken
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetMyIntegrationsStatusOKResponse
    },
    default: {}
  },
  serializer
};

const postImportRepositoryOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/repository/import",
  queryParameters: [
    Parameters.apiToken,
    Parameters.originId,
    Parameters.serviceType
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PostImportRepositoryOKResponse
    },
    default: {}
  },
  serializer
};

const getRepoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/repository/get",
  queryParameters: [
    Parameters.repoGuid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetRepoOKResponse
    },
    default: {}
  },
  serializer
};

const getProjectOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/project/get",
  queryParameters: [
    Parameters.projectGuid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetProjectOKResponse
    },
    default: {}
  },
  serializer
};

const editProjectOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/project/edit",
  queryParameters: [
    Parameters.apiToken,
    Parameters.projectGuid,
    Parameters.description0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EditProjectOKResponse
    },
    default: {}
  },
  serializer
};

const getProjectBoardsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/project/boards/get",
  queryParameters: [
    Parameters.projectGuid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetProjectBoardsOKResponse
    },
    default: {}
  },
  serializer
};

const getBoardOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/board/get",
  queryParameters: [
    Parameters.boardGuid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetBoardOKResponse
    },
    default: {}
  },
  serializer
};

const getBoardColumnsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/board/columns/get",
  queryParameters: [
    Parameters.boardGuid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetBoardColumnsOKResponse
    },
    default: {}
  },
  serializer
};

const getColumnCardsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/board_column/cards/get",
  queryParameters: [
    Parameters.columnGuid0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetColumnCardsOKResponse
    },
    default: {}
  },
  serializer
};

const getProjectByAliasOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/alias/project/get",
  queryParameters: [
    Parameters.owner,
    Parameters.alias
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetProjectByAliasOKResponse
    },
    default: {}
  },
  serializer
};

const createCardOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/card/create",
  queryParameters: [
    Parameters.apiToken,
    Parameters.columnGuid0,
    Parameters.name0,
    Parameters.description0,
    Parameters.columnOrder
  ],
  responses: {
    201: {
      bodyMapper: Mappers.CreateCardCreatedResponse
    },
    default: {}
  },
  serializer
};

const editCardOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/card/edit",
  queryParameters: [
    Parameters.apiToken,
    Parameters.cardGuid,
    Parameters.name1,
    Parameters.description0,
    Parameters.columnOrder,
    Parameters.columnGuid1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EditCardOKResponse
    },
    default: {}
  },
  serializer
};

const getCardWorkOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/card/work/get",
  queryParameters: [
    Parameters.cardGuid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetCardWorkOKResponse
    },
    default: {}
  },
  serializer
};

const getEntityFundingBalancesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/entity/funding/balances/get",
  queryParameters: [
    Parameters.entityGuid,
    Parameters.entityType
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetEntityFundingBalancesOKResponse
    },
    default: {}
  },
  serializer
};

const getCardProjectOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/card/project/get",
  queryParameters: [
    Parameters.cardGuid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetCardProjectOKResponse
    },
    default: {}
  },
  serializer
};

const getProjectWorkTypesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/project/work_types/get",
  queryParameters: [
    Parameters.projectGuid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetProjectWorkTypesOKResponse
    },
    default: {}
  },
  serializer
};

const postSubmitCardWorkOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/card/work/submit",
  queryParameters: [
    Parameters.apiToken,
    Parameters.cardGuid,
    Parameters.workTypeGuid,
    Parameters.proof
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PostSubmitCardWorkOKResponse
    },
    default: {}
  },
  serializer
};

const postInvoiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/invoice/new",
  queryParameters: [
    Parameters.apiToken,
    Parameters.entityGuid,
    Parameters.entityType,
    Parameters.amount,
    Parameters.currencyType
  ],
  responses: {
    201: {
      bodyMapper: Mappers.PostInvoiceCreatedResponse
    },
    default: {}
  },
  serializer
};

const getMyInvoiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/me/invoice/get",
  queryParameters: [
    Parameters.apiToken,
    Parameters.invoiceGuid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetMyInvoiceOKResponse
    },
    default: {}
  },
  serializer
};

const getMyActiveInvoicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/me/invoices/active",
  queryParameters: [
    Parameters.apiToken
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetMyActiveInvoicesOKResponse
    },
    default: {}
  },
  serializer
};

const getMyFinishedInvoicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/me/invoices/finished",
  queryParameters: [
    Parameters.apiToken
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetMyFinishedInvoicesOKResponse
    },
    default: {}
  },
  serializer
};

const patchMyInvoiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/me/invoice/status/update",
  queryParameters: [
    Parameters.apiToken,
    Parameters.invoiceGuid,
    Parameters.status
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PatchMyInvoiceOKResponse
    },
    default: {}
  },
  serializer
};

const getMyBalancesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/me/balances/get",
  queryParameters: [
    Parameters.apiToken
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetMyBalancesOKResponse
    },
    default: {}
  },
  serializer
};

const getMySettingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/me/setting/get",
  queryParameters: [
    Parameters.apiToken,
    Parameters.key
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetMySettingOKResponse
    },
    default: {}
  },
  serializer
};

const setMySettingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/me/setting/set",
  queryParameters: [
    Parameters.apiToken,
    Parameters.key,
    Parameters.value
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SetMySettingOKResponse
    },
    default: {}
  },
  serializer
};

const getMyLibraryProjectsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/me/library/projects/get",
  queryParameters: [
    Parameters.apiToken
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetMyLibraryProjectsOKResponse
    },
    default: {}
  },
  serializer
};

const addProjectToMyLibraryOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/me/library/project/add",
  queryParameters: [
    Parameters.apiToken,
    Parameters.projectGuid
  ],
  responses: {
    201: {
      bodyMapper: Mappers.AddProjectToMyLibraryCreatedResponse
    },
    default: {}
  },
  serializer
};

const removeProjectFromMyLibraryOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/me/library/project/remove",
  queryParameters: [
    Parameters.apiToken,
    Parameters.projectGuid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RemoveProjectFromMyLibraryOKResponse
    },
    default: {}
  },
  serializer
};

const getMyLibraryProjectStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/me/library/project/status/get",
  queryParameters: [
    Parameters.apiToken,
    Parameters.projectGuid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetMyLibraryProjectStatusOKResponse
    },
    default: {}
  },
  serializer
};

const getMeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/me/get",
  queryParameters: [
    Parameters.apiToken
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetMeOKResponse
    },
    default: {}
  },
  serializer
};

const getUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/user/get",
  responses: {
    200: {
      bodyMapper: Mappers.GetUserOKResponse
    },
    default: {}
  },
  serializer
};

const loginViaFacebookOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/auth/facebook/my_token/get",
  queryParameters: [
    Parameters.facebookToken
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LoginViaFacebookOKResponse
    },
    default: {}
  },
  serializer
};

const loginViaGoogleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/auth/google/my_token/get",
  queryParameters: [
    Parameters.googleToken
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LoginViaGoogleOKResponse
    },
    default: {}
  },
  serializer
};

const getMyEntityPermissionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/entity/permissions/get",
  queryParameters: [
    Parameters.apiToken,
    Parameters.entityGuid,
    Parameters.entityType
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetMyEntityPermissionsOKResponse
    },
    default: {}
  },
  serializer
};

const getNewestProjectsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/projects/newest/get",
  responses: {
    200: {
      bodyMapper: Mappers.GetNewestProjectsOKResponse
    },
    default: {}
  },
  serializer
};

const getRandomProjectsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/projects/random/get",
  responses: {
    200: {
      bodyMapper: Mappers.GetRandomProjectsOKResponse
    },
    default: {}
  },
  serializer
};

const getProjectProductsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/project/products/get",
  queryParameters: [
    Parameters.projectGuid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetProjectProductsOKResponse
    },
    default: {}
  },
  serializer
};

const postProjectProductOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/project/product/new",
  queryParameters: [
    Parameters.apiToken,
    Parameters.projectGuid,
    Parameters.name0,
    Parameters.description1,
    Parameters.usdPrice,
    Parameters.url,
    Parameters.useUrl,
    Parameters.durationHours
  ],
  responses: {
    201: {
      bodyMapper: Mappers.PostProjectProductCreatedResponse
    },
    default: {}
  },
  serializer
};

const deleteProjectProductOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/project/product/delete",
  queryParameters: [
    Parameters.apiToken,
    Parameters.productGuid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeleteProjectProductOKResponse
    },
    default: {}
  },
  serializer
};

const getMyWithdrawalRequestsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/me/withdrawals/get",
  queryParameters: [
    Parameters.apiToken
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetMyWithdrawalRequestsOKResponse
    },
    default: {}
  },
  serializer
};

const postWithdrawalRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/me/withdrawal/new",
  queryParameters: [
    Parameters.apiToken,
    Parameters.amount,
    Parameters.address,
    Parameters.currencyType
  ],
  responses: {
    201: {
      bodyMapper: Mappers.PostWithdrawalRequestCreatedResponse
    },
    default: {}
  },
  serializer
};

export {
  SupportHubApi,
  SupportHubApiContext,
  Models as SupportHubApiModels,
  Mappers as SupportHubApiMappers
};
